package org.bytecodeparser.instruction;

import lombok.Getter;

import java.io.DataInputStream;

import static org.bytecodeparser.instruction.InstructionArgumentsResolver.*;

@SuppressWarnings("unused")
public enum InstructionTypes {
    NOP(0, EMPTY),
    ACONST_NULL(1, EMPTY),
    ICONST_M1(2, EMPTY),
    ICONST_0(3, EMPTY),
    ICONST_1(4, EMPTY),
    ICONST_2(5, EMPTY),
    ICONST_3(6, EMPTY),
    ICONST_4(7, EMPTY),
    ICONST_5(8, EMPTY),
    LCONST_0(9, EMPTY),
    LCONST_1(10, EMPTY),
    FCONST_0(11, EMPTY),
    FCONST_1(12, EMPTY),
    FCONST_2(13, EMPTY),
    DCONST_0(14, EMPTY),
    DCONST_1(15, EMPTY),
    BIPUSH(16, SIMPLE_BYTE),
    SIPUSH(17, SIMPLE_SHORT),
    LDC(18, SIMPLE_BYTE),
    LDC_W(19, SIMPLE_BYTE),
    LDC2_W(20, SIMPLE_SHORT),
    ILOAD(21, SIMPLE_BYTE),
    LLOAD(22, SIMPLE_BYTE),
    FLOAD(23, SIMPLE_BYTE),
    DLOAD(24, SIMPLE_BYTE),
    ALOAD(25, SIMPLE_BYTE),
    ILOAD_0(26, EMPTY),
    ILOAD_1(27, EMPTY),
    ILOAD_2(28, EMPTY),
    ILOAD_3(29, EMPTY),
    LLOAD_0(30, EMPTY),
    LLOAD_1(31, EMPTY),
    LLOAD_2(32, EMPTY),
    LLOAD_3(33, EMPTY),
    FLOAD_0(34, EMPTY),
    FLOAD_1(35, EMPTY),
    FLOAD_2(36, EMPTY),
    FLOAD_3(37, EMPTY),
    DLOAD_0(38, EMPTY),
    DLOAD_1(39, EMPTY),
    DLOAD_2(40, EMPTY),
    DLOAD_3(41, EMPTY),
    ALOAD_0(42, EMPTY),
    ALOAD_1(43, EMPTY),
    ALOAD_2(44, EMPTY),
    ALOAD_3(45, EMPTY),
    IALOAD(46, EMPTY),
    LALOAD(47, EMPTY),
    FALOAD(48, EMPTY),
    DALOAD(49, EMPTY),
    AALOAD(50, EMPTY),
    BALOAD(51, EMPTY),
    CALOAD(52, EMPTY),
    SALOAD(53, EMPTY),
    ISTORE(54, SIMPLE_BYTE),
    LSTORE(55, SIMPLE_BYTE),
    FSTORE(56, SIMPLE_BYTE),
    DSTORE(57, SIMPLE_BYTE),
    ASTORE(58, SIMPLE_BYTE),
    ISTORE_0(59, EMPTY),
    ISTORE_1(60, EMPTY),
    ISTORE_2(61, EMPTY),
    ISTORE_3(62, EMPTY),
    LSTORE_0(63, EMPTY),
    LSTORE_1(64, EMPTY),
    LSTORE_2(65, EMPTY),
    LSTORE_3(66, EMPTY),
    FSTORE_0(67, EMPTY),
    FSTORE_1(68, EMPTY),
    FSTORE_2(69, EMPTY),
    FSTORE_3(70, EMPTY),
    DSTORE_0(71, EMPTY),
    DSTORE_1(72, EMPTY),
    DSTORE_2(73, EMPTY),
    DSTORE_3(74, EMPTY),
    ASTORE_0(75, EMPTY),
    ASTORE_1(76, EMPTY),
    ASTORE_2(77, EMPTY),
    ASTORE_3(78, EMPTY),
    IASTORE(79, EMPTY),
    LASTORE(80, EMPTY),
    FASTORE(81, EMPTY),
    DASTORE(82, EMPTY),
    AASTORE(83, EMPTY),
    BASTORE(84, EMPTY),
    CASTORE(85, EMPTY),
    SASTORE(86, EMPTY),
    POP(87, EMPTY),
    POP2(88, EMPTY),
    DUP(89, EMPTY),
    DUP_X1(90, EMPTY),
    DUP_X2(91, EMPTY),
    DUP2(92, EMPTY),
    DUP2_X1(93, EMPTY),
    DUP2_X2(94, EMPTY),
    SWAP(95, EMPTY),
    IADD(96, EMPTY),
    LADD(97, EMPTY),
    FADD(98, EMPTY),
    DADD(99, EMPTY),
    ISUB(100, EMPTY),
    LSUB(101, EMPTY),
    FSUB(102, EMPTY),
    DSUB(103, EMPTY),
    IMUL(104, EMPTY),
    LMUL(105, EMPTY),
    FMUL(106, EMPTY),
    DMUL(107, EMPTY),
    IDIV(108, EMPTY),
    LDIV(109, EMPTY),
    FDIV(110, EMPTY),
    DDIV(111, EMPTY),
    IREM(112, EMPTY),
    LREM(113, EMPTY),
    FREM(114, EMPTY),
    DREM(115, EMPTY),
    INEG(116, EMPTY),
    LNEG(117, EMPTY),
    FNEG(118, EMPTY),
    DNEG(119, EMPTY),
    ISHL(120, EMPTY),
    LSHL(121, EMPTY),
    ISHR(122, EMPTY),
    LSHR(123, EMPTY),
    IUSHR(124, EMPTY),
    LUSHR(125, EMPTY),
    IAND(126, EMPTY),
    LAND(127, EMPTY),
    IOR(128, EMPTY),
    LOR(129, EMPTY),
    IXOR(130, EMPTY),
    LXOR(131, EMPTY),
    IINC(132, TWO_BYTE),
    I2L(133, EMPTY),
    I2F(134, EMPTY),
    I2D(135, EMPTY),
    I2I(136, EMPTY),
    L2F(137, EMPTY),
    L2D(138, EMPTY),
    F2I(139, EMPTY),
    F2L(140, EMPTY),
    F2D(141, EMPTY),
    D2I(142, EMPTY),
    D2L(143, EMPTY),
    D2F(144, EMPTY),
    I2B(145, EMPTY),
    I2C(146, EMPTY),
    I2S(147, EMPTY),
    LCMP(148, EMPTY),
    FCMPL(149, EMPTY),
    FCMPG(150, EMPTY),
    DCMPL(151, EMPTY),
    DCMPG(152, EMPTY),
    IFEQ(153, SIMPLE_SHORT),
    IFNE(154, SIMPLE_SHORT),
    IFLT(155, SIMPLE_SHORT),
    IFGE(156, SIMPLE_SHORT),
    IFGT(157, SIMPLE_SHORT),
    IFLE(158, SIMPLE_SHORT),
    IF_ICMPEQ(159, SIMPLE_SHORT),
    IF_ICMPNE(160, SIMPLE_SHORT),
    IF_ICMPLT(161, SIMPLE_SHORT),
    IF_ICMPGE(162, SIMPLE_SHORT),
    IF_ICMPGT(163, SIMPLE_SHORT),
    IF_ICMPLE(164, SIMPLE_SHORT),
    IF_ACMPEQ(165, SIMPLE_SHORT),
    IF_ACMPNE(166, SIMPLE_SHORT),
    GOTO(167, SIMPLE_SHORT),
    JSR(168, SIMPLE_SHORT),
    RET(169, SIMPLE_SHORT),
    IRETURN(172, EMPTY),
    LRETURN(173, EMPTY),
    FRETURN(174, EMPTY),
    DRETURN(175, EMPTY),
    ARETURN(176, EMPTY),
    RETURN(177, EMPTY),
    GETSTATIC(178, SIMPLE_SHORT),
    PUTSTATIC(179, SIMPLE_SHORT),
    GETFIELD(180, SIMPLE_SHORT),
    PUTFIELD(181, SIMPLE_SHORT),
    INVOKEVIRTUAL(182, SIMPLE_SHORT),
    INVOKESPECIAL(183, SIMPLE_SHORT),
    INVOKESTATIC(184, SIMPLE_SHORT),
    INVOKEINTERFACE(185, TRIPLE_SHORT_BYTE_ZERO),
    INVOKEDYNAMIC(186, TRIPLE_SHORT_ZERO_ZERO),
    NEW(187, SIMPLE_SHORT),
    NEWARRAY(188, SIMPLE_BYTE),
    ANEWARRAY(189, SIMPLE_SHORT),
    ARRAYLENGTH(190, EMPTY),
    ATHROW(191, EMPTY),
    CHECKCAST(192, SIMPLE_SHORT),
    INSTANCEOF(193, SIMPLE_SHORT),
    MONITORENTER(194, SIMPLE_SHORT),
    MONITOREXIT(195, SIMPLE_SHORT),
    MULTIANEWARRAY(197, THREE_BYTES),
    IFNULL(198, SIMPLE_SHORT),
    IFNONNULL(199, SIMPLE_SHORT),
    GOTO_W(200, SIMPLE_INT),
    JSR_W(201, SIMPLE_INT);

    @Getter
    final Integer opCode;
    final InstructionArgumentsResolver instructionArgumentsResolver;

    InstructionTypes(int opCode, InstructionArgumentsResolver prettyPrintTypes) {
        this.opCode = opCode;
        this.instructionArgumentsResolver = prettyPrintTypes;
    }

    public InstructionArguments resolve(DataInputStream dataInputStream) {
        return instructionArgumentsResolver.argumentsResolveStrategy.apply(dataInputStream);
    }

}
